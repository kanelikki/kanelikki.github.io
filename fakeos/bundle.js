!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=30)}([function(e,t,n){"use strict";var i=n(1),r=n(10),s=n(5),o=n(3);class a{constructor(e){this.windowList=new Array,this.activeBar=null,this.AddToBar=(e=>{const t=e.detail;if(t instanceof i.a)return;const n=new l(t);this.windowList.push(n),this.windows.appendChild(n.statusObject)}),this.RemoveFromBar=(e=>{const t=e.detail;if(t instanceof i.a)return;const n=this.windowList.findIndex(e=>e.windowObject===t);-1!==n&&(this.windowList[n].statusObject.remove(),this.windowList.splice(n,1)),0===this.windowList.length&&(this.activeBar=null)}),this.FocusBar=(e=>{const t=e.detail;if(t instanceof i.a){if(null===t.parent)return;this.activeBar=this.windowList.filter(e=>e.windowObject===t.parent)[0],this.activeBar&&this.activeBar.Select()}else t.minimized||(this.activeBar=this.windowList.filter(e=>e.windowObject===t)[0],this.activeBar&&this.activeBar.Select())}),this.FocusOutBar=(e=>{this.activeBar&&this.activeBar.UnSelect()}),this.windows=e,document.body.addEventListener("winopen",this.AddToBar),document.body.addEventListener("winclose",this.RemoveFromBar),document.body.addEventListener("winfocus",this.FocusBar),document.body.addEventListener("winfocusout",this.FocusOutBar)}static Get(){return a._this?a._this:null}static Set(e){a._this||(a._this=new a(e))}}class l{constructor(e){this.ChangeToThis=(()=>i.c.Get().ChangeWindow(this.windowObject)),this.MinToggle=(e=>{i.c.Get().LastActive!==this.windowObject?i.c.Get().ChangeWindow(this.windowObject):this.windowObject.minimized?this.windowObject.UnMinimize():this.windowObject.Minimize()}),this.Select=(()=>this.statusObject.classList.add("selected")),this.UnSelect=(()=>this.statusObject.classList.remove("selected")),this.windowObject=e,this.statusObject=this.MakeBar(),document.body.addEventListener("wintitle",this.ChangeBar),new s.a(this.statusObject,r.a,o.b.up)}MakeBar(){let e=document.createElement("div");const t=this.windowObject;return e.title=this.windowObject.title,e.prepend(t.favicon.cloneNode()),e.addEventListener("mousedown",this.ChangeToThis),e.addEventListener("click",this.MinToggle),e}ChangeBar(){this.statusObject.innerText=this.windowObject.windowBar.getElementsByTagName("span")[0].innerHTML}}class c extends o.a{constructor(e){super(n(76).default,e),this._btn=e,this.primaryDivClass=["statusbar-startmenu"]}static Set(e){c._this||(c._this=new c(e))}static Get(){return c._this?c._this:null}}class d{constructor(){this.SetClock=(()=>{setInterval(()=>this.clock.innerText=(new Date).toLocaleTimeString(),1e3)});const e=(new DOMParser).parseFromString(n(77),"text/html").body;this.element=e.firstChild,e.firstChild&&document.body.appendChild(e.firstChild),c.Set(this.element.getElementsByClassName("statusbar-startbutton")[0]),this.clock=this.element.getElementsByClassName("statusbar-clock")[0],a.Set(this.element.getElementsByClassName("statusbar-window")[0]),this.SetClock()}static Set(){d._this||(d._this=new d)}static Get(){return d._this?d._this:null}}var u=n(6);let h=0,p=0;var m=[{name:"Refresh all",action:()=>{new i.a("Serious Question","All of your settings will be gone. Is it OK?",[["OK",()=>location.reload()],["Cancel",i.b.Close]])}},{name:"Make new...",menu:[{name:"Text File",action:()=>new u.b("default/notepad",null,`noname${++p}.txt`)},{name:"Doodle File",action:()=>new u.b("default/paint",null,`untitled${++h}.png`)}]},{name:"Monitor Settings",action:()=>new i.d("system/_monitor")},{name:"Change the BG!",action:()=>new i.d("system/background")}];class f{constructor(){this._element=document.createElement("div"),this._element.classList.add("desktop"),document.body.appendChild(this._element),new s.a(this._element,m)}static Get(){return f.This||(f.This=new f),f.This}}n.d(t,"g",function(){return i.d}),n.d(t,"f",function(){return i.c}),n.d(t,"b",function(){return i.a}),n.d(t,"e",function(){return i.b}),n.d(t,"d",function(){return d}),n.d(t,"c",function(){return u.b}),n.d(t,"a",function(){return f}),document.addEventListener("mousedown",e=>{if(o.c.ActiveMenu){const t=e.target;t.classList.contains("menu-selectable")||t.classList.contains("menu-disabled")||o.c.ActiveMenu.RemoveMenu()}},!0),document.addEventListener("click",e=>{if(o.c.ActiveMenu){if(!e.target.classList.contains("menu-selectable"))return;o.c.ActiveMenu.RemoveMenu()}}),document.addEventListener("contextmenu",e=>e.preventDefault()),n(78)},function(e,t,n){"use strict";var i,r=n(2),s=n(9);!function(e){e[e.Window=0]="Window",e[e.Dialog=1]="Dialog"}(i||(i={}));class o extends s.a{constructor(e,t=i.Window,n=b.Get().view){super(n),this._title="",this.WinCon=b.Get(),this._minimized=!1,this._order=0,this.OpenEvent=new CustomEvent("winopen",{detail:this}),this.CloseEvent=new CustomEvent("winclose",{detail:this}),this.FocusOnEvent=new CustomEvent("winfocus",{detail:this}),this.FocusOutEvent=new CustomEvent("winfocusout",{detail:this}),this.EndInit=(()=>{this.WinCon.AddWindow(this)}),this.SetTitle=(e=>{this.windowBar.getElementsByTagName("span")[0].innerText=e,this._title=e}),this.NoMove=(e=>e.stopPropagation()),this.Minimize=(()=>{this.target.style.display="none",this._minimized=!0,this.WinCon.FocusOutWindow(this)}),this.UnMinimize=(()=>{this.target.style.display="flex",this._minimized=!1,this.WinCon.ChangeWindow(this)}),this.Close=(()=>{if(this.WinCon.RemoveWindow(this),this instanceof c){const e=this;e.modal&&e.modal.RemoveModal(),e.parent&&(e.parent.modal=null,b.Get().ChangeWindow(this.parent))}}),this.Select=(e=>{this.WinCon.FocusOnWindow(this)}),this.UnSelect=(e=>{this.WinCon.FocusOutWindow(this)}),this._winName=e,this._windowBar=this.target.getElementsByClassName("window-title")[0],this._resizable=!1,this.Init(t)}Init(e){e!==i.Dialog&&(this.windowBar.getElementsByClassName("title-minimize")[0].addEventListener("mousedown",this.NoMove,!1),this.windowBar.getElementsByClassName("title-maximize")[0].addEventListener("mousedown",this.NoMove,!1),this.windowBar.getElementsByClassName("title-minimize")[0].addEventListener("click",this.Minimize,!1)),this.windowBar.getElementsByClassName("title-close")[0].addEventListener("mousedown",this.NoMove,!1),this.windowBar.getElementsByClassName("title-close")[0].addEventListener("click",this.Close,!1),this.windowBar.addEventListener("mousedown",this.Register,!1),this.target.addEventListener("mousedown",this.Select,!0)}SetSize(e,t){this.target.style.width=e+"px",this.target.style.height=t+"px"}SetOrder(e){this.target.style.zIndex=e.toString(),this._order=e}get winName(){return this._winName}get windowBar(){return this._windowBar}get minimized(){return this._minimized}get title(){return this._title}get resizable(){return this._resizable}get order(){return this._order}}class a{constructor(e,t=(e=>e.stopPropagation())){this._target=e,this._background=document.createElement("div"),this.background.classList.add("modal"),this.background.addEventListener("click",t,!1),this.target.parentNode.insertBefore(this.background,this.target),this.background.appendChild(this.target)}get target(){return this._target}get background(){return this._background}}class l extends a{constructor(e){super(e.target),this.RemoveModal=(()=>{this.background&&(this.background.remove(),this._background=null)}),this.background.classList.add("modal-window")}}class c extends o{constructor(e,t,n,r=v.Now()){super(e,i.Dialog,b.Get().dialogView),this._modal=null,this._parent=null,this.Minimize=(()=>{}),this.UnMinimize=(()=>{}),this.target.classList.add("window-dialog"),r&&(r.target.appendChild(this.target),r.modal=this,this._parent=r,this._modal=new l(this),this._modal.background&&this._modal.background.addEventListener("mousedown",this.Select,!0)),this.SetTitle(e),this.SetMessage(t),this.SetButtons(n),this.EndInit();const s=this.target.getBoundingClientRect();this._modal&&this._modal.background?this.SetPosition((this._modal.background.clientWidth-s.width)/2,(this._modal.background.clientHeight-s.height)/2):this.SetPosition((document.body.clientWidth-s.width)/2,(document.body.clientHeight-s.height)/2)}SetMessage(e){this.target.getElementsByClassName("window-dialog-message")[0].innerText=e}SetButtons(e){const t=this.target.getElementsByClassName("window-dialog-buttons")[0];for(let n=0;n<e.length;n++){const i=document.createElement("div");i.classList.add("button"),i.innerText=e[n][0],i.addEventListener("click",e[n][1]),t.appendChild(i)}}get parent(){return this._parent}get modal(){return this._modal}}class d{static Minimize(){b.Get().LastActive.minimized||b.Get().LastActive.Minimize()}static UnMinimize(){const e=b.Get().LastActive;e.minimized&&(e.UnMinimize(),e.Select())}static Maximize(){const e=b.Get().LastActive;e.minimized&&this.UnMinimize(),e instanceof v&&!e.maximized&&e.Maximize(),e.Select()}static Close(){b.Get().ActiveWindow.Close()}static CloseAll(){const e=b.Get().LastActive;if(e instanceof v)e.Close();else if(e instanceof c){const t=e;t.parent?(t.Close(),t.parent.Close()):t.Close()}}}const u=300,h=300;var p;!function(e){e[e.north=0]="north",e[e.east=1]="east",e[e.south=2]="south",e[e.west=3]="west",e[e.ne=4]="ne",e[e.nw=5]="nw",e[e.se=6]="se",e[e.sw=7]="sw"}(p||(p={}));class m{constructor(e,t,n){switch(this.pos=null,this.mouseX=0,this.mouseY=0,this.ResizeRegister=(e=>{let t=e;this.pos=new r.a(this.target.clientWidth,this.target.clientHeight,this.target.offsetTop,this.target.offsetLeft),this.mouseX=t.clientX,this.mouseY=t.clientY,document.addEventListener("mousemove",this.Resize,!1),document.addEventListener("mouseup",this.Unresize,{once:!0,capture:!1})}),this.Resize=(e=>{null!==this.pos&&(e.preventDefault(),this.resizeType(e),e.stopPropagation())}),this.ResizeN=(e=>{let t=this.pos.height+(this.mouseY-e.clientY);t>=h&&e.clientY>=0&&(this.target.style.height=t+"px",this.target.style.top=e.clientY+"px")}),this.ResizeW=(e=>{let t=this.pos.width+(this.mouseX-e.clientX);t>=u&&(this.target.style.width=t+"px",this.target.style.left=e.clientX+"px")}),this.ResizeE=(e=>{e.clientX>=0&&(this.target.style.width=this.pos.width+(e.clientX-this.mouseX)+"px")}),this.ResizeS=(e=>{this.target.style.height=this.pos.height+(e.clientY-this.mouseY)+"px"}),this.Unresize=(()=>{document.removeEventListener("mousemove",this.Resize,!1),this.pos=null}),this._self=e,this.target=t,n){case p.east:this.resizeType=this.ResizeE;break;case p.west:this.resizeType=this.ResizeW;break;case p.south:this.resizeType=this.ResizeS;break;case p.north:this.resizeType=this.ResizeN;break;case p.ne:this.resizeType=function(e){this.ResizeN(e),this.ResizeE(e)};break;case p.nw:this.resizeType=function(e){this.ResizeN(e),this.ResizeW(e)};break;case p.se:this.resizeType=function(e){this.ResizeS(e),this.ResizeE(e)};break;case p.sw:this.resizeType=function(e){this.ResizeS(e),this.ResizeW(e)};break;default:this.resizeType=this.Unresize}this.Init()}Init(){this._self.addEventListener("mousedown",this.ResizeRegister,!1)}get self(){return this._self}}var f=n(10),g=n(3),w=n(5);class v extends o{constructor(e){super(e,i.Window,b.Get().view),this._modal=null,this._modalev=null,this.programName=null,this.resizers=new Array(8),this._maximized=!1,this._openAction=null,this.SetContent=(e=>{const t=new DOMParser,i=this.target.getElementsByClassName("window-content")[0];let r=i.shadowRoot;try{const s=t.parseFromString(n(31)(`./${this.winName}/${e}.html`),"text/html").body.children,o=function(e){for(let t=0;t<s.length;t++)e.appendChild(s[t])};if(r){const e=r.querySelector("div");if(!e)return;e.textContent="",o(e)}else{r=i.attachShadow({mode:"open"});const e=n(33)(`./${this.winName}/${this.programName}.css`).default,t=document.createElement("style");t.textContent=e,r.appendChild(t);const s=document.createElement("div");s.style.width="100%",s.style.height="100%",o(s),r.appendChild(s);try{const e=document.createElement("script"),t=n(42)(`./${this.winName}/${this.programName}.js`).default;e.textContent=t,i.appendChild(e)}catch(e){}}}catch(e){r||(r=i.attachShadow({mode:"open"}));const t=document.createElement("p");console.error(e),t.innerText="ooopps failed to load! press f12 and read console to check why",r.appendChild(t)}}),this.OpenFile=(e=>{this._openAction&&this._openAction(e,this.contentPage.shadowRoot)}),this.Maximize=(()=>{if(null===this.PositionData){this.PositionData=new r.a(this.target.clientWidth,this.target.clientHeight,this.target.offsetTop,this.target.offsetLeft),this.target.style.width="100%",this.target.style.height="100%",this.target.style.top="0",this.target.style.left="0";for(let e=0;e<8;e++)this.resizers[e]&&(this.resizers[e].self.style.display="none");this._maximized=!0}else{this.PositionData.SetStyle(this.target),this.PositionData=null;for(let e=0;e<8;e++)this.resizers[e]&&(this.resizers[e].self.style.display="block");this._maximized=!1}this._resizable=!this.resizable}),this._contentPage=this.target.getElementsByClassName("window-content")[0];let t,s=this.target.getElementsByClassName("window-menu")[0];try{const i=e.lastIndexOf("/");if(this.programName=e.substring(i+1),null===(t=n(47)(`./${e}/${this.programName}.ts`).default))throw"WindowData requires title and resizable keys. Check your (programname).ts file.";if(t.menu&&null!==s&&s.appendChild(Object(g.d)(t.menu)),!0===t.resizable)this.target.prepend(this.WinCon.resizerView.cloneNode(!0)),this.SetResizers(),this.windowBar.getElementsByClassName("title-maximize")[0].addEventListener("click",this.Maximize,!1),this.windowBar.addEventListener("dblclick",this.Maximize,!1);else{const e=this.windowBar.getElementsByClassName("title-maximize");null!==e&&e[0].remove()}let r;t.fileOpen&&(this._openAction=t.fileOpen),this.SetTitle(t.title||"Noname"),this.SetContent("index");try{r=n(29)(`./${e}/favicon.png`)}catch(e){r=n(15)}const o=document.createElement("img");o.src=r,this._favicon=o,this._favicon.classList.add("favicon"),this.windowBar.insertBefore(o,this.windowBar.firstChild);const a=this.WinCon.next.next().value;if(this.SetPosition(a,a),new w.a(this.windowBar,f.a),this.EndInit(),"system"===e.substring(0,i))try{n(72)(`./${e}/${this.programName}.system.ts`).default(this)}catch(e){}}catch(e){return this.target.remove(),console.error(e),void new c("Error","You are trying to load bad egg",[["Oops",d.Close]],null)}}SetResizers(){this._resizable=!0,this.resizers[0]=new m(this.target.getElementsByClassName("window-resize-n")[0],this.target,p.north),this.resizers[1]=new m(this.target.getElementsByClassName("window-resize-s")[0],this.target,p.south),this.resizers[2]=new m(this.target.getElementsByClassName("window-resize-e")[0],this.target,p.east),this.resizers[3]=new m(this.target.getElementsByClassName("window-resize-w")[0],this.target,p.west),this.resizers[4]=new m(this.target.getElementsByClassName("window-resize-ne")[0],this.target,p.ne),this.resizers[5]=new m(this.target.getElementsByClassName("window-resize-se")[0],this.target,p.se),this.resizers[6]=new m(this.target.getElementsByClassName("window-resize-nw")[0],this.target,p.nw),this.resizers[7]=new m(this.target.getElementsByClassName("window-resize-sw")[0],this.target,p.sw)}static Now(){return b.Get().ActiveWindow}get maximized(){return this._maximized}get contentPage(){return this._contentPage}get modal(){return this._modal}set modal(e){this._modal=e}get modalev(){return this._modalev}set modalev(e){this._modalev=e}get favicon(){return this._favicon}}n.d(t,"c",function(){return b}),n.d(t,"d",function(){return v}),n.d(t,"a",function(){return c}),n.d(t,"b",function(){return d});class b{constructor(){this._Windows=new Array,this._view=document.createDocumentFragment(),this._dialogView=document.createDocumentFragment(),this._resizerView=document.createDocumentFragment(),this._ActiveWindow=null,this._LastActive=null,this._next=this.nextPos(),this.SortedWindow=(()=>this.Windows.sort((e,t)=>e.order-t.order));const e=new DOMParser,t=e.parseFromString(n(73),"text/html").body,i=e.parseFromString(n(74),"text/html").body,s=e.parseFromString(n(75),"text/html").body;t.firstChild&&this.view.appendChild(t.firstChild),i.firstChild&&this.dialogView.appendChild(i.firstChild),s.firstChild&&[...s.children].forEach(e=>this._resizerView.appendChild(e)),document.body.addEventListener("mousedown",()=>this.FocusOutWindow(),!0),window.addEventListener("resize",function(){b.Get().Windows.filter(e=>parseInt(e.target.style.left||"0")>r.c).forEach(e=>e.target.style.left=r.c.toString()+"px"),b.Get().Windows.filter(e=>parseInt(e.target.style.top||"0")>r.b).forEach(e=>e.target.style.top=r.b.toString()+"px")})}static Get(){return b._this||(b._this=new b),b._this}AddWindow(e){this.Windows.push(e),e.SetOrder(this.Windows.length+1),this.FocusOnWindow(e),document.body.dispatchEvent(e.OpenEvent)}RemoveWindow(e){this.ActiveWindow!==e&&this.FocusOnWindow(e),e.target.remove();const t=this.Windows.length;this.Windows.splice(this.Windows.indexOf(e),1),t>0&&this.FocusOnWindow(this.SortedWindow()[t-1]),this.FocusOutWindow(),document.body.dispatchEvent(e.CloseEvent)}FocusOnWindow(e){if(this.ActiveWindow!==e&&(this._ActiveWindow&&this.FocusOutWindow(),this._ActiveWindow=e,e)){const t=this.SortedWindow(),n=t.indexOf(e);let i;-1!==n&&(t.slice(n).map(e=>e.SetOrder(e.order-1)),e.SetOrder(this.Windows.length+1)),e instanceof v&&e.modal?(this.FocusOnWindow(e.modal),i=e.modal.target):(this._ActiveWindow.target.classList.add("window-active"),i=e.target),this._LastActive=e,document.body.dispatchEvent(e.FocusOnEvent)}}FocusOutWindow(e=this._ActiveWindow){!this._ActiveWindow||this._ActiveWindow!==e&&this._ActiveWindow instanceof v&&this._ActiveWindow.modal!==e||(this._ActiveWindow.target.classList.remove("window-active"),document.body.dispatchEvent(this._ActiveWindow.FocusOutEvent),this._ActiveWindow=null)}ChangeWindow(e){this.FocusOutWindow(),this.FocusOnWindow(e)}get view(){return this._view}get dialogView(){return this._dialogView}get resizerView(){return this._resizerView}get ActiveWindow(){return this._ActiveWindow}get Windows(){return this._Windows}get LastActive(){return this._LastActive}*nextPos(){let e=0;for(;;){for(;e<r.b-300;e+=30)yield e;e=2*this.Windows.length}}get next(){return this._next}}},function(e,t,n){"use strict";n.d(t,"c",function(){return i}),n.d(t,"b",function(){return r}),n.d(t,"a",function(){return s});let i=window.innerWidth-100,r=window.innerHeight-20;class s{constructor(e,t,n,i){this._width=e,this._height=t,this._top=n,this._left=i}get width(){return this._width}get height(){return this._height}get top(){return this._top}get left(){return this._left}SetStyle(e){e.style.width=this.width+"px",e.style.height=this.height+"px",e.style.left=(this.left>i?i:this.left)+"px",e.style.top=(this.top>r?r:this.top)+"px"}}},function(e,t,n){"use strict";var i;function r(e){let t=document.createDocumentFragment();return function e(t,n){if(!t)return;const i=t[Symbol.iterator]();let r;for(;!r||!r.done;){if(!(r=i.next()).value||!r.value.name)continue;let t=document.createElement("div");if(r.value.action?(t.innerText=r.value.name,t.classList.add("menu-selectable"),t.onclick=r.value.action):r.value.menu||r.value.vmenu?t.classList.add("menu-wrapper"):(t.innerText=r.value.name,t.classList.add("menu-disabled")),r.value.menu||r.value.vmenu){let n=document.createElement("div"),i=document.createElement("div");i.classList.add("menu-selectable"),i.innerText=r.value.name,t.appendChild(i),n.classList.add("menu-secondary"),r.value.vmenu?(n.classList.add("menu-secondary-vertical"),e(r.value.vmenu,n)):e(r.value.menu,n),t.appendChild(n)}n.appendChild(t)}}(e,t),t}function s(e){const t=e.length,n=document.createDocumentFragment();for(let i=0;i<t;i++){const t=document.createElement("div"),r=document.createElement("div");t.classList.add("menu-wrapper-primary"),r.classList.add("menu-primary"),r.innerText=e[i].name,t.appendChild(r),e[i].menu&&(document.createElement("div"),new a(e[i].menu,r).SetClassList(["window-submenu","menu-secondary"])),n.appendChild(t)}return n}n.d(t,"b",function(){return i}),n.d(t,"d",function(){return s}),n.d(t,"c",function(){return o}),n.d(t,"a",function(){return a}),function(e){e[e.up=0]="up",e[e.down=1]="down",e[e.upLeft=2]="upLeft",e[e.downLeft=3]="downLeft"}(i||(i={}));class o{constructor(e){this._div=null,this.appendTarget=document.body,this.primaryDivClass=[],this.ShowMenu=((e,t,n,s)=>{o.ActiveMenu&&o.ActiveMenu.RemoveMenu();const a=document.createElement("div");if(this._div=a,this.primaryDivClass.push("menu-first"),a.classList.add(...this.primaryDivClass),this.appendTarget.appendChild(a),a.appendChild(r(this.menu)),o.ActiveMenu=this,t&&n){switch(s){case i.upLeft:t-=a.getBoundingClientRect().width;case i.up:n-=a.getBoundingClientRect().height;break;case i.downLeft:t-=a.getBoundingClientRect().width}a.style.left=t+"px",a.style.top=n+"px"}e&&(e.preventDefault(),e.stopPropagation())}),this.RemoveMenu=(()=>{this.div&&this.div.remove(),o.ActiveMenu=null,this._div=null}),this.menu=e}get div(){return this._div}}o.ActiveMenu=null;class a extends o{constructor(e,t){super(e),this.appendTarget=t.parentElement,t.addEventListener("click",this.ShowMenu)}SetClassList(e){this.primaryDivClass=e}}},function(e,t,n){"use strict";n.d(t,"a",function(){return r}),n.d(t,"d",function(){return s}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return l}),n.d(t,"c",function(){return c});var i=n(0);const r=function e(t,n,i=null){let r;r={parent:i,name:n,children:new Array,fileInfo:null};const s=t;r.children=s?Object.keys(s).reduce((t,n)=>{const i=s[n];if(null!==i&&"string"!=typeof i)t.push(e(i,n,r));else{const e={parent:r,name:n,children:null,fileInfo:{realName:n,data:i}};if(-1!==n.indexOf("/")){const i=n.indexOf("/"),s=n.substring(0,i),o=n.substring(i+1);let a=t.filter(e=>e.name==s)[0];a||(a={parent:r,name:s,children:new Array,fileInfo:null},t.push(a)),null!==a.children&&(e.name=o,a.children.push(e))}else t.push(e)}return t},[]):null;0==r.children.length&&(r.children=null);return r}({"C:":{"Program Filez":a(n(56),"exe","system"),System42:a(n(57),"exe"),Users:{Admin:{},localhost:{Documents:{"readme.txt":n(58),"about_backgrounds.txt":n(28),"license.txt":n(59)},Videos:{},Images:a(n(22),"jpg")}}},"D:":{}},"file:\\"),[s,o]=[l("C:\\System42\\"),l("C:\\Users\\localhost\\")];function a(e,t,n){let i,r={},s=e.keys();try{if(n){n.length;s=s.filter(e=>null===e.match("^./"+n+"/"))}switch(t){case"exe":s=s.map(e=>e=e.replace(/\/index\.html$/,"")+".exe"),i=(()=>null);break;case"jpg":case"png":i=(t=>e(t));break;default:i=(e=>e)}r=s.reduce((e,t)=>{return e[t.substring(2)]=i(t),e},{})}catch(e){return console.error(e),null}return r}function l(e){let t={path:r,label:e};const n=e.split("\\");let i=n.length;""===n[i-1]?(n.pop(),i--):t.label+="\\";for(let e=0;e<i;e++){let i=t.path.children;if(null===i)return null;if(t.path=i.filter(t=>null!==t&&"string"!=typeof t&&t.name==n[e])[0],!t.path)return null}return t}function c(e){return e.children?e.children.reduce((e,t)=>{let n={name:t.name.replace(/\.[^.]+$/,"")||t.name,action:void 0,menu:void 0};if(t.fileInfo){const e=t.fileInfo.realName.replace(/\.[^.]+$/,"")||t.fileInfo.realName;if(t.fileInfo.data){let r=t.fileInfo.data||"";n.action=(()=>{new i.g(e).OpenFile(r)})}else n.action=(()=>{new i.g(e)})}else n.menu=c(t);return e.push(n),e},[]):[{name:"(Empty)"}]}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var i=n(3);class r extends i.c{constructor(e,t,n=i.b.down){super(t),this.RightMenu=(e=>{e.currentTarget===this.target&&this.ShowMenu(e,e.clientX,e.clientY,this._direction)}),this._target=e,this._direction=n,this.primaryDivClass=["menu-right","menu-secondary"],e.addEventListener("contextmenu",this.RightMenu)}get target(){return this._target}}},function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"b",function(){return l});var i=n(9),r=n(1),s=n(5),o=n(2);class a{constructor(e=document.body){this.SelectIcon=(e=>{null!==this._selected&&this.UnSelectIcon(),e.target.classList.add("icon-selected"),this._selected=e,a._lastselect=e}),this.UnSelectIcon=(()=>{null!==this._selected&&(this._selected.target.classList.remove("icon-selected"),this._selected.target.style.backgroundColor="",this._selected=null)}),this.DefaultPosition=(()=>[Math.floor(this.iconCount/a.iconPerCol)*a.iconMargin,this.iconCount%a.iconPerCol*a.iconMargin]),this._background=e,this._selected=null,a._lastselect=null,this.iconCount=0}static Get(){return a._this||(a._this=new a,a._this.Init()),this._this}Init(){a._iconPerCol=Math.floor(o.b/a.iconMargin),null!=a.parsedIcon&&a.view.appendChild(a.parsedIcon),document.addEventListener("mousedown",this.UnSelectIcon),window.addEventListener("resize",()=>a._iconPerCol=Math.floor(o.b/a.iconMargin))}static get view(){return this._view}get selected(){return this._selected}static get lastselect(){return a._lastselect}get background(){return this._background}static get iconMargin(){return this._iconMargin}static get iconPerCol(){return this._iconPerCol}get iconMenu(){return a._iconMenu}}a._view=document.createDocumentFragment(),a._iconMargin=105,a.parsedIcon=(new DOMParser).parseFromString(n(60),"text/html").body.firstChild,a._iconMenu=[{name:"change name",action:()=>{const e=a.lastselect;e&&e.EditMode()}},{name:"delete",action:()=>{const e=a.lastselect;e&&e.Remove()}}];class l extends i.a{constructor(e,t,n,i,o=a.Get()){super(a.view,o.background),this.Remove=(()=>{this.target.remove(),this.controller.iconCount--}),this.Select=(e=>{this.controller.SelectIcon(this),e&&e.stopPropagation()}),this.controller=o,this.target.addEventListener("mousedown",this.Register,!1),this.labelObject=this.target.getElementsByClassName("icon-label")[0],this.setName(n||e),i?this.setIcon(i,!0):this.setIcon(e),t=t||(()=>new r.d(e)),this.target.addEventListener("dblclick",t),this.target.addEventListener("mousedown",this.Select),o===a.Get()&&this.SetPosition(...o.DefaultPosition()),new s.a(this.target,this.controller.iconMenu),o.iconCount++}setIcon(e,t=!1){let i;try{if(t)try{i=n(61)(`./${e}.png`)}catch(t){r(e)}else r(e);function r(e){try{i=n(29)(`./${e}/favicon.png`)}catch(e){i=n(15)}}}catch(e){i=n(15)}finally{let e=this.target.getElementsByClassName("icon-img")[0];e?e.src=i:((e=document.createElement("img")).src=i,this.target.prepend(e)),this._icon=e}}EditMode(){this.labelObject.contentEditable="true",this.Select(),this.labelObject.focus();const e=this.labelObject.innerText;this.labelObject.addEventListener("focusout",()=>{this.setName(this.labelObject.innerText||e),this.labelObject.contentEditable="false"},{once:!0})}setName(e){this.labelObject.innerText=e}get icon(){return this._icon}}},function(e,t,n){"use strict";n.r(t);var i=n(4),r=n(8),s=n(0);t.default=function(e,t=i.a,n){const o=e.contentPage.shadowRoot.querySelector(".explorer-wrap"),a=o.querySelector(".explorer-head");if(!a)return;const[l,c]=[a.querySelector(".explorer-menu-up"),a.querySelector(".explorer-head-state")],d=o.querySelector(".explorer-body");if(null===d)return;const u=new r.ExplorerController(d);function h(e,n=null){if(null===e)return;if(t=e,null===e.children)return;const r=e.children.filter(e=>"_"!==e.name[0]);if(!r)return;const o=r.length;null!==n&&(c.innerText=n),u.iconCount=0,d.textContent="";for(let t=0;t<o;t++){let n,o,a,l=r[t];if(o=l.name,null!==l){if(null===l.fileInfo)n=null!==l.children?()=>{c.innerText+=o+"\\",h(l)}:()=>new s.b("Error","Permission denied",[[":(",s.e.Close]]),a=e===i.a?"drive":"folder";else{const t=l.fileInfo.realName,r=t.lastIndexOf(".");o=t.substring(0,r);const c=p(t.substring(r+1))||(e==i.d.path?"system/":"")+o;n=(()=>{let e=new s.g(c);l.fileInfo.data&&e.OpenFile(l.fileInfo.data)}),a=e==i.d.path?"fakeos":c}const t=new s.c(o,n,l.name,a,u);t.labelObject.addEventListener("focusout",()=>{l.name=t.labelObject.innerText})}}}function p(e){switch(e){case"jpg":case"png":return"default/imgview";case"txt":return"default/notepad";default:return null}}n||(l.addEventListener("click",()=>h(t.parent,c.innerText.replace(/[^\\]*\\$/,""))),a.querySelector(".explorer-menu-root").addEventListener("click",()=>h(i.a,"")),a.querySelector(".explorer-menu-userdir").addEventListener("click",()=>h(i.e.path,i.e.label))),h(t,n||"")}},function(e,t,n){"use strict";n.r(t),n.d(t,"ExplorerController",function(){return r});var i=n(6);class r extends i.a{constructor(e){super(e),this.iconCount=0}static Get(){return console.error("ExplorerController.Get() method returns IconController.\nIf you want IconController, Please use IconController.Get() directly.\nSince ExplorerController is not private, you can directly assign the controller."),super.Get()}get iconMenu(){return r._iconMenu}}r._iconMenu=[{name:"change name",action:()=>{const e=i.a.lastselect;e&&e.EditMode()}}]},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var i=n(2);class r{constructor(e,t=document.body){this.mouseX=0,this.mouseY=0,this.PositionData=null,this.Register=(e=>{null===this.PositionData&&this._target&&(this.mouseX=e.clientX-parseInt(this._target.style.left||"0"),this.mouseY=e.clientY-parseInt(this._target.style.top||"0"),document.addEventListener("mousemove",this.Drag,!1),document.addEventListener("mouseup",this.Unregister,{once:!0,capture:!1}))}),this.Drag=(e=>{e.clientX>0&&e.clientX<i.c&&(this._target.style.left=(e.clientX-this.mouseX).toString()+"px"),e.clientY>0&&e.clientY<i.b&&(this._target.style.top=(e.clientY-this.mouseY).toString()+"px")}),this.Unregister=(()=>document.removeEventListener("mousemove",this.Drag,!1)),this._target=this instanceof s?this.NewChild(e,t):e.firstElementChild||document.createElement("div")}SetPosition(e,t){this.target.style.left=e+"px",this.target.style.top=t+"px"}get target(){return this._target}}class s extends r{constructor(e,t=document.body){super(e,t)}NewChild(e,t=document.body){const n=e.cloneNode(!0),i=n.firstChild;return null===i&&console.error("Copyable class has empty DocumentFragment"),t.appendChild(n),i}}},function(e,t,n){"use strict";var i=n(1);t.a=[{name:"Minimize",action:()=>i.b.Minimize()},{name:"Maximize",action:()=>i.b.Maximize()},{name:"Close",action:()=>i.b.CloseAll()}]},function(e,t){e.exports='<div class="monitor-wrap">\r\n    <div class="monitor">1</div>\r\n    <div class="monitor-labelbox">\r\n        <div>\r\n            <span>Width: </span><span id="monitor-width"></span>\r\n        </div>\r\n        <div>\r\n            <span>Height: </span><span id="monitor-height"></span>\r\n        </div>\r\n        <div>\r\n            <span>State: </span><span id="monitor-state"></span>\r\n        </div>\r\n        <div>\r\n            <span>Result: </span><span id="monitor-result"></span>\r\n        </div>\r\n    </div>\r\n</div>'},function(e,t){e.exports='<div class="bgchange-wrap">\r\n    <div class="bgchange-imgs"></div>\r\n    <div class="bgchange-type">\r\n        <select class="bgchange-select">\r\n            <option value="fit">Fit the Screen</option>\r\n            <option value="tilecenter">Tile and Center</option>\r\n            <option value="tiletop">Tile and Top</option>\r\n            <option value="center">Center</option>\r\n        </select>\r\n    </div>\r\n</div>'},function(e,t){e.exports='<div class="explorer-wrap">\r\n    <div class="explorer-head">\r\n        <div class="explorer-head-state">&nbsp;</div>\r\n        <div class="explorer-head-menu">\r\n        <div class="explorer-menu-up">up</div>\r\n        <div class="explorer-menu-root">root</div>\r\n        <div class="explorer-menu-userdir">userdir</div>\r\n        </div>\r\n    </div>\r\n    <div class="explorer-body"></div>\r\n</div>'},function(e,t,n){e.exports=n.p+"cc799a64f1809df3fb6c15fe1133d133.jpg"},function(e,t,n){e.exports=n.p+"8c0f85970af015a1134d63add88e7bdf.png"},function(e,t){e.exports='<div class="calc-wrap">\r\n    <div class="calc-screen" id="calc-screen">0</div>\r\n    <div class="calc-btns" id="calc-btns">\r\n        <div>C</div>\r\n        <div>+-</div>\r\n        <div>&lt;-</div>\r\n        <div>/</div>\r\n        <div>7</div>\r\n        <div>8</div>\r\n        <div>9</div>\r\n        <div>*</div>\r\n        <div>4</div>\r\n        <div>5</div>\r\n        <div>6</div>\r\n        <div>-</div>\r\n        <div>1</div>\r\n        <div>2</div>\r\n        <div>3</div>\r\n        <div>+</div>\r\n        <div style="grid-column-start: 1;grid-column-end: 3">0</div>\r\n        <div>.</div>\r\n        <div>=</div>\r\n    </div>\r\n</div>'},function(e,t){e.exports='<div class="imgview-wrap">\r\n<div class="imgview-content"></div>\r\n</div>'},function(e,t){e.exports='<div class="notepad-wrap">\r\n<textarea></textarea>\r\n</div>'},function(e,t){e.exports='<div class="paint-wrap">\r\n    <div class="paint-style">\r\n        <div id="paint-clear">Clear</div>\r\n        <div id="paint-size" class="paint-layout-even">\r\n            <div id="paint-size1">1</div>\r\n            <div id="paint-size2">2</div>\r\n            <div id="paint-size3">3</div>\r\n            <div id="paint-size4">4</div>\r\n            <div id="paint-size5">5</div>\r\n        </div>\r\n        <div id="paint-brush" class="paint-layout-even">\r\n            <div id="paint-brush-round"></div>\r\n            <div id="paint-brush-rect"></div>\r\n        </div>\r\n        <div class="paint-color">\r\n            <div class="paint-color-current" style="background-color: #000"></div>\r\n            <div class="paint-color-select" id="paint-color">\r\n            <div style="background-color:#fff"></div>\r\n            <div style="background-color:#000"></div>\r\n            <div style="background-color:#aaa"></div>\r\n            <div style="background-color:#666"></div>\r\n            <div style="background-color:#f00"></div>\r\n            <div style="background-color:#600"></div>\r\n            <div style="background-color:#0f0"></div>\r\n            <div style="background-color:#060"></div>\r\n            <div style="background-color:#00f"></div>\r\n            <div style="background-color:#006"></div>\r\n            <div style="background-color:#ff0"></div>\r\n            <div style="background-color:#f0f"></div>\r\n            <div style="background-color:#0ff"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class="paint-content window-content-fill">\r\n        <canvas id="paint-canvas"></canvas>\r\n    </div>\r\n</div>'},function(e,t){e.exports="<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>\r\n<p>Hello, World!</p>"},function(e,t,n){"use strict";n.r(t),t.default=function(e){const t=n(22),i=e.contentPage.shadowRoot.querySelector(".bgchange-imgs");if(!i)return;const r=t.keys();for(let e=0;e<r.length;e++){const t=r[e],s=document.createElement("div"),o=n(54)("./backgrounds"+t.substring(1));s.style.backgroundImage="url('"+o+"')",s.dataset.bg=t.substring(2),s.onclick=function(){this&&(document.body.style.backgroundImage=this.style.backgroundImage)},i.appendChild(s)}}},function(e,t,n){var i={"./bababank.jpg":23,"./default.jpg":14,"./engineerwhale.jpg":24,"./fireplace.jpg":25,"./lightbulb.jpg":26,"./renderingexcuse.jpg":27};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=22},function(e,t,n){e.exports=n.p+"acbc92a9274b916406af43212475ec88.jpg"},function(e,t,n){e.exports=n.p+"a9337754112c3e7eb46e23b124de81bb.jpg"},function(e,t,n){e.exports=n.p+"c4214559c92d93b0b28c10b46ef4a1df.jpg"},function(e,t,n){e.exports=n.p+"64b07f3cbb0d0bad6a1401cae27579bb.jpg"},function(e,t,n){e.exports=n.p+"afa6eac25943b0d9d31bca86ec28348d.jpg"},function(e,t){e.exports='******* ABOUT IMAGE LICENSES *******\r\nI made(@rnielikki github) all of them, but some of them may contain the license from the characters.\r\n\r\nbababank.jpg Baba - from "Baba is you" Game\r\nengineerwhale.jpg Whale - Engineers\' organization in Lahti\r\nfireplace.jpg Tree - from "Skrolli" character\r\nrenderingexcuse.jpg - from a part of "XKCD" series\r\n\r\nall others can use freely without asking, wherever.\r\n\r\nNOTE: if you change and redistribute this with your images, please change this to the images\' licenses.'},function(e,t,n){var i={"./default/calculator/favicon.png":66,"./default/imgview/favicon.png":67,"./default/notepad/favicon.png":68,"./default/paint/favicon.png":69,"./helloworld/favicon.png":70};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=29},function(e,t,n){"use strict";n.r(t);var i=n(0);window.onload=function(){i.d.Set(),i.a.Get(),new i.c("system/explorer",null,"My Computer","computer"),new i.c("system/explorer",()=>{const e=new i.g("system/explorer");e.OpenFile("C:\\Users\\localhost")},"My Documents","folder"),new i.c("helloworld",null,"hello world"),new i.c("default/paint",null,"photoshop"),new i.c("default/calculator",null,"matlab"),new i.c("default/notepad",null,"visual studio code")}},function(e,t,n){var i={"./default/calculator/index.html":16,"./default/imgview/index.html":17,"./default/notepad/index.html":18,"./default/paint/index.html":19,"./helloworld/index.html":20,"./helloworld/page2.html":32,"./system/_monitor/index.html":11,"./system/background/index.html":12,"./system/explorer/index.html":13};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=31},function(e,t){e.exports="<div>\r\n    you are here\r\n</div>"},function(e,t,n){var i={"./default/calculator/calculator.css":34,"./default/imgview/imgview.css":35,"./default/notepad/notepad.css":36,"./default/paint/paint.css":37,"./helloworld/helloworld.css":38,"./system/_monitor/_monitor.css":39,"./system/background/background.css":40,"./system/explorer/explorer.css":41};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=33},function(e,t,n){"use strict";n.r(t),t.default="        .calc-wrap{\r\n            background-color:#ccc;color:#000;\r\n            height:100%;\r\n            font-size:150%;\r\n            font-family: sans-serif;\r\n        }\r\n        .calc-screen{\r\n            padding:1.5rem;\r\n            height:20%;\r\n            background-color:#fff;\r\n            border:1px solid #999;\r\n            box-sizing: border-box;\r\n        }\r\n        .calc-btns{\r\n            height:80%;\r\n            display: grid;\r\n            grid-template-columns: auto auto auto auto;\r\n        }\r\n        .calc-btns div{\r\n            width:100%; height:100%;\r\n            box-sizing:border-box;\r\n            border:2px outset #999;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n        .calc-btns div:active{\r\n            border:2px inset #999;\r\n            background-color:#999;\r\n        }"},function(e,t,n){"use strict";n.r(t),t.default=".imgview-wrap{\r\n    font-family: sans-serif;\r\n    width:100%;\r\n    height:100%;\r\n    overflow: hidden;\r\n}\r\n.imgview-content{\r\n    width:100%;\r\n    height:100%;\r\n    background-color: #000;\r\n}\r\n.imgview-content img{\r\n    width:100%;\r\n    height:100%;\r\n}"},function(e,t,n){"use strict";n.r(t),t.default=".notepad-wrap{\r\n    font-family: sans-serif;\r\n    width:100%;\r\n    height:100%;\r\n    overflow: hidden;\r\n}\r\ntextarea{\r\n    width:100%;\r\n    height:100%;\r\n    resize:none;\r\n}"},function(e,t,n){"use strict";n.r(t),t.default=".paint-wrap{\r\n    width:100%;\r\n    height:100%;\r\n    display:flex;\r\n    flex-direction:column;\r\n}\r\n.paint-style{\r\n    display:grid;\r\n    grid-template-columns:5em 5em 5em auto;\r\n    height:100px;\r\n    background-color: #ccc;\r\n}\r\n.paint-style > div{\r\n    display:flex;\r\n    align-items: center;\r\n}\r\n.paint-style > div:not(.paint-layout-even){\r\n    justify-content: center;\r\n}\r\n.paint-layout-even{\r\n    justify-content:space-evenly;\r\n}\r\n.paint-color-select > div{\r\n    display:inline-block;\r\n    width:30px;height:30px;\r\n}\r\n.paint-color-current{\r\n    width:60px;height:60px;\r\n    margin-right:5px;\r\n}\r\n.paint-content{\r\n    height:100%;\r\n    background-color:#aaa;\r\n}\r\ncanvas{\r\n    background-color:#fff;\r\n}\r\n/*pure css simple icons*/\r\n#paint-brush-round, #paint-brush-rect{\r\n    border:2px solid #000;\r\n    width:1.6em; height:1.6em;\r\n}\r\n#paint-brush-round{\r\n    border-radius: 50%;\r\n}"},function(e,t,n){"use strict";n.r(t),t.default="p{color:#3a9aea;}"},function(e,t,n){"use strict";n.r(t),t.default=".monitor-wrap{\r\n    font-family: sans-serif;\r\n    display:flex;\r\n    flex-direction:column;\r\n    width:100%;\r\n    height:100%;\r\n    overflow: hidden;\r\n}\r\n#monitor-result.perfect{\r\n    color:#2a6a2a;\r\n}\r\n#monitor-result.good{\r\n    color:#606000;\r\n}\r\n#monitor-result.bad{\r\n    color:#903030;\r\n}\r\n#monitor-result.nope{\r\n    color:#c03030;\r\n}\r\n.monitor{\r\n    flex-grow: 1;\r\n    display: flex;\r\n    color:#fff;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color:#666;\r\n    width:100%; height:100%;\r\n    font-size: 500%;\r\n}\r\n.monitor:hover{\r\n    background-color:#999;\r\n}\r\n.monitor-labelbox{\r\n    padding: 1.35rem;\r\n    line-height:1.5em;\r\n    background-color:#d6e3ea;\r\n}"},function(e,t,n){"use strict";n.r(t),t.default=".bgchange-wrap{\r\n    font-family: sans-serif;\r\n    width:100%;\r\n    height:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.bgchange-imgs{\r\n    width:100%;\r\n    height:100%;\r\n    display:grid;\r\n    grid-template-columns: auto auto auto;\r\n    overflow: hidden;\r\n    flex-grow: 1;\r\n}\r\n.bgchange-imgs div{\r\n    background-size:cover;\r\n}\r\n.bgchange-type{\r\n    padding: 0.5em;\r\n    text-align: center;\r\n    background-color:#3f5482;\r\n}"},function(e,t,n){"use strict";n.r(t),t.default='.explorer-head{\r\n    background-color:#aaa;\r\n    overflow: hidden;\r\n    position: sticky;\r\n    top:0;\r\n    width: 100%;\r\n}\r\n.explorer-head-state{\r\n    margin:.7em .5em;\r\n    border:2px inset #ccc;\r\n    height:1.1em;\r\n    background-color:#fff;\r\n}\r\n.explorer-head-menu{\r\n    display:flex;\r\n}\r\n.explorer-head-menu div{\r\n    border:2px solid transparent;\r\n    flex-grow:1;\r\n    flex-shrink: 1;\r\n    text-align: center;\r\n}\r\n.explorer-head-menu div:active{\r\n    border:2px inset #ccc;\r\n    background-color: #999;\r\n}\r\n.explorer-body{\r\n    position: relative;\r\n}\r\n/* because css is loaded when shadow dom opens so "insulated" from main. you must add on your own... */\r\n.explorer-body .icon{\r\n    display: inline-block;\r\n    margin:1.1em;\r\n    vertical-align: top;\r\n}\r\n.explorer-body .icon-img, .explorer-body .icon {\r\n    width:48px;\r\n}\r\n.icon-selected .icon-img{\r\n    filter: sepia(80%) hue-rotate(180deg) brightness(0.6);\r\n}\r\n.icon-selected  .icon-label{\r\n    background-color:rgba(45,45,105,0.5);\r\n    overflow:visible;\r\n    height:auto;\r\n}\r\n.icon-label{\r\n    font-size:90%;\r\n    word-wrap:break-word;\r\n    overflow:hidden;\r\n    text-align: center;\r\n}\r\n.icon-label[contenteditable="true"] {\r\n    background-color: #fff !important;\r\n    text-shadow: none;\r\n    color: #000;\r\n}'},function(e,t,n){var i={"./default/calculator/calculator.js":43,"./default/paint/paint.js":44,"./helloworld/helloworld.js":45,"./system/_monitor/_monitor.js":46};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=42},function(e,t,n){"use strict";n.r(t),t.default='        (function(){\r\n            const thisBody=document.currentScript.parentElement.shadowRoot;\r\n            if(!thisBody) return;\r\n            const display=thisBody.getElementById("calc-screen");\r\n            const children=thisBody.getElementById("calc-btns").children;\r\n            const count=children.length;\r\n            let calcResult=0;\r\n            let resultSwitch=false;\r\n            let isFloat=false;\r\n            for(let i=0;i<count;i++){\r\n                children[i].addEventListener("click",addCalc);\r\n            }\r\n            function addCalc(e){\r\n                const txt=e.target.innerText;\r\n                const displayState=display.innerText;\r\n                const opReg=new RegExp("[\\\\+\\\\-\\\\*\\\\/]","g");\r\n                if(!isNaN(txt)){\r\n                    if(resultSwitch===false && displayState!=="0"){\r\n                        if(displayState[displayState.length-1]==="0" && isNaN(displayState[displayState.length-2]||0) && !isFloat){\r\n                            display.innerText=displayState.slice(0,-1);\r\n                        }\r\n                        display.innerText+=txt;\r\n                    }\r\n                    else{\r\n                        display.innerText=txt;\r\n                        unmarkResult();\r\n                    }\r\n                }\r\n                else{\r\n                    switch(txt){\r\n                        case "+":\r\n                        case "-":\r\n                        case "*":\r\n                        case "/":\r\n                            if(!isNaN(displayState[displayState.length-1])){\r\n                                display.innerText+=txt;\r\n                                unmarkResult();\r\n                                isFloat=false;\r\n                            }\r\n                            break;\r\n                        case ".":\r\n                            if(!resultSwitch && !isFloat){\r\n                                if(isNaN(displayState[displayState.length-1])){\r\n                                    display.innerText+="0";\r\n                                }\r\n                                display.innerText+=txt;\r\n                                isFloat=true;\r\n                            }\r\n                            break;\r\n                        case "=":\r\n                            calculation(displayState);\r\n                            break;\r\n                        case "C":\r\n                            init();\r\n                            break;\r\n                        case "+-":\r\n                            if(!isNaN(displayState) && displayState!=="0"){\r\n                                display.innerText=(displayState[0]==="-"?display.innerText.substring(1):"-"+display.innerText);\r\n                            }\r\n                            break;\r\n                        case "<-":\r\n                            if(displayState!=="0" && displayState.length>0){\r\n                                if(resultSwitch){\r\n                                    init();\r\n                                }\r\n                                else{\r\n                                    if(displayState[displayState.length-1]===".") isFloat=false;\r\n                                    display.innerText=displayState.slice(0,-1);\r\n                                }\r\n                                \r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                function init(){\r\n                     unmarkResult();\r\n                     isFloat=false;\r\n                     display.innerText="0";\r\n                }\r\n                function calculation(text){\r\n                    let ifStartMinus="";\r\n                    if(text[0]==="-"){\r\n                        ifStartMinus="-";\r\n                        text=text.substring(1);\r\n                    }\r\n                    const ops=text.match(opReg);\r\n                    const nums=text.split(opReg);\r\n                    //check if valid\r\n                    if(nums.filter(num=>isNaN(num||"_")).length===0){\r\n                        const calcResult=eval(ifStartMinus+text);\r\n                        display.innerText=isNaN(calcResult)?"ERroR":calcResult;\r\n                        markResult();\r\n                        isFloat=false;\r\n                    }\r\n                }\r\n                function markResult(){\r\n                    display.style.fontSize="200%";\r\n                    resultSwitch=true;\r\n                }\r\n                function unmarkResult(){\r\n                    display.style.fontSize="100%";\r\n                    resultSwitch=false;\r\n                }\r\n            }\r\n        })();'},function(e,t,n){"use strict";n.r(t),t.default='(function () {\r\n    const thisBody = document.currentScript.parentElement.shadowRoot;\r\n    const canvas = thisBody.getElementById("paint-canvas");\r\n    let host = thisBody.host;\r\n    let win = host.parentElement;\r\n    canvas.width = "1200";\r\n    canvas.height = "600";\r\n    const topOffset = host.getBoundingClientRect().top + 100;\r\n    const ctx = canvas.getContext("2d");\r\n    ctx.lineJoin = "round";\r\n    ctx.lineCap = "round";\r\n    ctx.lineWidth = 20;\r\n    let styleBuffer = { left: 0, top: 0 };\r\n    const draw = function (e) {\r\n        ctx.lineTo(e.clientX - styleBuffer.left + host.scrollLeft, e.clientY - styleBuffer.top - topOffset + host.scrollTop);\r\n        ctx.stroke();\r\n    }\r\n    const setDraw = function (e) {\r\n        styleBuffer.left = parseInt(win.style.left);\r\n        styleBuffer.top = parseInt(win.style.top);\r\n        ctx.beginPath();\r\n        ctx.moveTo(e.clientX - styleBuffer.left + host.scrollLeft, e.clientY - styleBuffer.top - topOffset + host.scrollTop);\r\n        canvas.addEventListener("mousemove", draw);\r\n    }\r\n    const stopDraw = function (e) {\r\n        canvas.removeEventListener("mousemove", draw);\r\n    }\r\n    canvas.addEventListener("mousedown", setDraw);\r\n    canvas.addEventListener("mouseup", stopDraw);\r\n    canvas.addEventListener("mouseleave", stopDraw);\r\n    /// end of event basic canvas\r\n\r\n    /// start of paint setup\r\n    const bgState = thisBody.querySelector(".paint-color-current");\r\n    const setColor = function (e) {\r\n        if (!e.target.style) return;\r\n        const bg = e.target.style.backgroundColor;\r\n        if (bg) {\r\n            ctx.strokeStyle = bg;\r\n            bgState.style.backgroundColor = bg;\r\n        }\r\n    }\r\n    const setSize = function (size) {\r\n        ctx.lineWidth = size * 5;\r\n    }\r\n    const setBrushStyle = function (style) {\r\n        switch (style) {\r\n            case "round":\r\n                ctx.lineJoin = "round";\r\n                ctx.lineCap = "round";\r\n                break;\r\n            case "rect":\r\n                ctx.lineJoin = "bevel";\r\n                ctx.lineCap = "butt";\r\n                break;\r\n        }\r\n    }\r\n    thisBody.getElementById("paint-clear").addEventListener("click", () => ctx.clearRect(0, 0, canvas.width, canvas.height));\r\n    thisBody.getElementById("paint-color").addEventListener("click", setColor);\r\n    thisBody.getElementById("paint-brush-round").addEventListener("click", () => setBrushStyle("round"));\r\n    thisBody.getElementById("paint-brush-rect").addEventListener("click", () => setBrushStyle("rect"));\r\n    for (let i = 1; i < 6; i++) {\r\n        thisBody.getElementById("paint-size" + i).addEventListener("click", () => setSize(i));\r\n    }\r\n})();'},function(e,t,n){"use strict";n.r(t),t.default=""},function(e,t,n){"use strict";n.r(t),t.default='(function () {\r\n    const thisBody = document.currentScript.parentElement.shadowRoot;\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    thisBody.getElementById("monitor-width").innerText = width;\r\n    thisBody.getElementById("monitor-height").innerText = height;\r\n    const state = CheckState();\r\n    const result=thisBody.getElementById("monitor-result");\r\n    switch(state){\r\n        case 0:\r\n            result.classList.add("perfect");\r\n            result.innerText="Perfect! No problem!";\r\n            break;\r\n        case 1:\r\n            result.classList.add("good");\r\n            result.innerText="Not perfect, but OK";\r\n            break;\r\n        case 2:\r\n        case 3:\r\n            result.classList.add("bad");\r\n            result.innerText="I think this doesn\'t fit for your screen";\r\n            break;\r\n        case 4:\r\n            result.classList.add("nope");\r\n            result.innerText="Change your monitor immediately!";\r\n            break;\r\n    }\r\n    function CheckState(){\r\n        const state=thisBody.getElementById("monitor-state");\r\n        let problem=0;\r\n        if(width<1000){\r\n            state.innerText+="Width is too small.\\n";\r\n            problem++;\r\n        }\r\n        if(height<600){\r\n            state.innerText+="Height is too small.\\n";\r\n            problem++;\r\n        }\r\n        if(width<1000 && height<600){\r\n            state.innerText+="This OS doesn\'t look like mobile, isn\'t it?\\n";\r\n            problem++;\r\n        }\r\n        if(width/height<1.1){\r\n            state.innerText+="I recommend to use horizontal screen...\\n";\r\n            problem++;\r\n        }\r\n        return problem;\r\n    }\r\n})();'},function(e,t,n){var i={"./default/calculator/calculator.ts":48,"./default/imgview/imgview.ts":49,"./default/notepad/notepad.ts":50,"./default/paint/paint.ts":51,"./helloworld/helloworld.ts":52,"./system/_monitor/_monitor.ts":53,"./system/background/background.system.ts":21,"./system/background/background.ts":55,"./system/explorer/explorer.system.ts":7,"./system/explorer/explorer.ts":71,"./system/explorer/icon.system.ts":8};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=47},function(e,t,n){"use strict";n.r(t);t.default={title:"Ca+lc-ul*at/or=",resizable:!1}},function(e,t,n){"use strict";n.r(t);var i=n(0);const r=new RegExp(/rotate\(-?\d+deg\)/i),s={title:"Image Viewer",resizable:!1,fileOpen:(e,t)=>{const n=document.createElement("img");n.src=e,t.querySelector(".imgview-content").appendChild(n)},menu:[{name:"Options",menu:[{name:"Turn...",menu:[{name:"Left",action:()=>{o("rotate",r,-90)}},{name:"Right",action:()=>{o("rotate",r,90)}},{name:"180deg",action:()=>{o("rotate",r,180)}},{name:"360deg",action:()=>{}}]},{name:"Flip...",menu:[{name:"Horizontal",action:()=>{o("scaleX",/scaleX\(-?\d+\)/i,-1,e=>-e)}},{name:"Vertical",action:()=>{o("scaleY",/scaleY\(-?\d+\)/i,-1,e=>-e)}}]},{name:"Exit",action:()=>i.e.CloseAll()}]},{name:"Help",menu:[{name:"About",action:()=>{new i.b("About","Image viewer. Text view not supported",[["Ok",i.e.Close]])}},{name:"Bug report",action:()=>{new i.b("Alert","It's not a bug. it's a feature.",[["What?",i.e.Close]])}}]}]};t.default=s;const o=(e,t,n,r=null)=>{const s=i.f.Get().LastActive.target;let o="";"rotate"===e&&(o="deg");const a=s.style.transform||"";let l=a.match(t);if(a&&null!==l){let i=l[0].match(/-?\d+/),c=r?r(n):parseInt(i[0],10)+n;s.style.transform=a.replace(t,`${e}(${c.toString()}${o})`)}else s.style.transform+=`${e}(${n}${o})`}},function(e,t,n){"use strict";n.r(t);var i=n(0);const r={title:"Noname - notepad",resizable:!0,fileOpen:(e,t)=>{t.querySelector("textarea").innerHTML=e.replace(/\n/g,"&#13;&#10;")},menu:[{name:"File",menu:[{name:"Open",action:()=>{new i.b("Error","There're no text file to read. please run as administrator.",[["I am already a boss",i.e.Close]])}},{name:"Save",action:()=>{new i.b("Error","Disk space is not sufficient. Please delete anything to save.",[["I won't",i.e.Close]])}},{name:"Exit",action:()=>i.e.CloseAll()}]},{name:"Help",menu:[{name:"About",action:()=>{new i.b("About","A broken basic system notepad.\nMade by FakeOS.\nNew Feature: You can draw ASCII Art.\nBut save is not supported",[["WTF?",i.e.Close]])}}]}]};t.default=r},function(e,t,n){"use strict";n.r(t);var i=n(0);const r={title:"Noname - paint",resizable:!0,menu:[{name:"File",menu:[{name:"Open",action:()=>{new i.b("Error","There're no text file to open. please run as administrator.",[["I am already a boss",i.e.Close]])}},{name:"Save",action:()=>{new i.b("Error","Disk space is not sufficient. Please delete anything to save.",[["I won't",i.e.Close]])}},{name:"Exit",action:()=>i.e.CloseAll()}]},{name:"Help",menu:[{name:"About",action:()=>{new i.b("About","A broken basic system paint.\nMade by FakeOS.\nNew Feature: You can draw a text.\nBut save is not supported",[["WTF?",i.e.Close]])}}]}]};t.default=r},function(e,t,n){"use strict";n.r(t);var i=n(0);const r={title:"hello world program",resizable:!0,menu:[{name:"Menu1",menu:[{name:"Change Text",action:()=>{const e=i.g.Now().contentPage.shadowRoot.querySelector("div").querySelector("p");e?e.innerHTML="lol":new i.b("I say","Where did the index page go? oops!",[["OK",i.e.Close]])}},{name:"Submenu2",action:()=>{i.g.Now().SetContent("page2")}},{name:"Open new",action:()=>new i.g("helloworld")},{name:"Save",menu:[{name:"Save",action:()=>new i.b("I say","Saved",[["OK",i.e.Close]])},{name:"Save As",action:()=>new i.b("I say","Save As not supported :P",[["OK",i.e.Close]])}]},{name:"Exit",action:()=>{new i.b("See ya!","Bye!",[["OK",i.e.CloseAll]])}}]},{name:"Menu2",menu:[{name:"Lol",action:()=>new i.b("Error","No such user",[["OK",i.e.Close]])},{name:"..."}]}]};t.default=r},function(e,t,n){"use strict";n.r(t);t.default={title:"Change Monitor Settings",resizable:!1}},function(e,t,n){var i={"./backgrounds/LICENSE.txt":28,"./backgrounds/bababank.jpg":23,"./backgrounds/default.jpg":14,"./backgrounds/engineerwhale.jpg":24,"./backgrounds/fireplace.jpg":25,"./backgrounds/lightbulb.jpg":26,"./backgrounds/renderingexcuse.jpg":27};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=54},function(e,t,n){"use strict";n.r(t);t.default={title:"Change Background Image to refresh!",resizable:!1}},function(e,t,n){var i={"./default/calculator/index.html":16,"./default/imgview/index.html":17,"./default/notepad/index.html":18,"./default/paint/index.html":19,"./helloworld/index.html":20,"./system/_monitor/index.html":11,"./system/background/index.html":12,"./system/explorer/index.html":13};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=56},function(e,t,n){var i={"./_monitor/index.html":11,"./background/index.html":12,"./explorer/index.html":13};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=57},function(e,t){e.exports='\n## What is this?\n\nUh… It’s core engine of something like Windows 93 (which is not related to this). It has windows, icons, and status bar. Works fully on client side, you can add in your own work with only front-end supported page like github.io.\n\n## What I need to develop/use this?\n\nEditor, webpack, node.js and some packages. Typescript and SCSS.\nJS and CSS for fake software development. All others are Typescript and SCSS.\n\n## So… What’s the point of this?\n\nNothing. Maybe April joke?\n\n\n# Common Rules\n\n* File names must be case-insensitive. All file names are low characters.\n*\t__lib__ is library, __src__ is source folder.\n  * At Webpack require, \\_\\_lib\\_\\_ is alias of lib folder and \\_\\_src\\_\\_ is alias of src folder.\n\n## Structure\nFakeOS is component-based program. As a developer, you can add any component or modules.\n* __lib__\n  * components \n  * modules\n  * common.scss : global stylesheet. SCSS.\n  * index.scss : stylesheet entry\n  * index.ts : component/module entry\n* __src__\n  * see "For users" guide.\n\n# For users\n## src structure:\n* index.ts : add default values when the program is loaded.\n* (and each components directory)\n* resource : resource directory\n  * background.jpg\n  * default_icon.png : If Icon files are broken, this is used as default. (mandatory)\n  * icons : for custom icons, which can be implemented in future.\n### About each components…\n* desktop\n  * menu.ts : right-click menu file, which exported by “export default”. See below to how to make menu. (mandatory)\n* statusbar\n  * menu.ts: way of writing is same as desktop menu, but it isn’t right-click but a start menu. (mandatory)\n* window\n  * They are (program group folder)/program. For example, you can make system/explorer or system/cmd.\n  * In a program, it contains:\n    * favicon.png (Not mandatory)\n    * index.html (mandatory)\n      *\tYou can make more custom html page to load.\n    * *program_name*.css (mandatory)\n    * *program_name*.js (Not mandatory)\n    * *program_name*.ts (mandatory)\n    ```typescript\n    import { WindowData } from "__lib__/index";\n\n     const app={\n     title: “title name”,\n     resizable: true|false,\n     menu?: [menuObject], //optional, see menu structure section\n     }\n     export default app;\n     ```\n    * *program_name*.system.ts (only in "system" folder, not mandatory)\n \n### libraries:\n* new window for _new WindowObject(winName:string)_\n * This calls from "program info" file from src/window. (See above!)\n* new dialog for _new DialogObject(winName: string, message: string, buttons: [string, () => void][], parent: WindowObject | null = WindowObject.Now())_\n* new icon for _new IconObject(iconName: string, Action?: (() => void) | null, iconLabel?: string, iconPicName?: string, controller=IconController.Get())_\n* new Right-click menu for _new RightMenu(target: HTMLElement, menu: any[], direction: MenuDirection = MenuDirection.down)_\n* closing window for WIN.Close()\n  * use WIN.CloseAll() instead for closing the dialog and its parent\n\n### Menu structure\n   ```typescript\n    {\n       name: “string”, //menu text to be shown\n       action: ()=>void(), //don’t use only function name(like WIN.Close).\n       menu: [ … ] //submenu, which contains “menu structure”\n              //note: currently we support vmenu(vertical menu), but I don’t know if it’s useful.\n   }\n   ```\n* menu is "Menu" type array. (Menu[])\n* Since menu contains function, it cannot be a JSON. But if you want to make JSON, remember to change the action to string.\n* If you’re not sure, see the example in the file.\n\n# For developers\n## Guide\n* Remember to call every stylesheets to lib/index.scss after adding. And removing too.\n * You can call to lib/index.ts if you want. This can make code clean, if you call it often and the path is complicated.\nWhat’s Component and what’s module\n* Class and most method names are PascalCase. Fields and properties are either PascalCase or camelCase.\n* Components are directly used by library user and contains main HTML or CSS Element template.\n* Modules used by components. Even it contains CSS,\n  * Module make and attach HTML Elements through the TS code.\n* If not sure (rightclick.ts), if it doesn’t contain HTML/CSS element, go to module.\n## Component Rules\n* Main instantiable name and its skeleton ends with ”Object”\n* Instantiable objects’ controller name is “NameController” and they’re singleton. (Exception: IconController is "protected" for Explorer)\n* right click menu is menu_name.ts in src directory.\n* If the component is a library (can called by library user), add to lib/index.js\n* Component structures are:\n  * (component).html (not always )\n  * (component).css\n  * src\n    *\t(component).ts\n    * (can add more ts files here)\n\n## TODO\n* Please make more programs!\n* Icon multiselect\n* Recycle bin\n* Sound feature\n* If you found some bugs, please report/fix it!\n* Make documentation web page <3\n\n## Still not sure?\nIn the src directory, you can read some test codes and learn how to use.\n\n__Issues tab is always open.__\n\nIf you want to commit something, just do it. If the code doesn\'t follow the rules, I can change it.\n'},function(e,t){e.exports='MIT License\n\nCopyright (c) 2019 Lumi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'},function(e,t){e.exports='<div class="icon">\r\n    <img class="icon-img">\r\n    <div class="icon-label"></div>\r\n</div>'},function(e,t,n){var i={"./computer.png":62,"./drive.png":63,"./fakeos.png":64,"./folder.png":65};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=61},function(e,t,n){e.exports=n.p+"b6511f226c4982c3823a9103a5081968.png"},function(e,t,n){e.exports=n.p+"bdca6f8c95e7b169e23ed812a1b5652b.png"},function(e,t,n){e.exports=n.p+"c45292efec9e3c309adf2c696ccd737c.png"},function(e,t,n){e.exports=n.p+"6727b5cb87c63f5ed53c5bb8b761420d.png"},function(e,t,n){e.exports=n.p+"c0735eb00fd1996f210cdea8e951b40f.png"},function(e,t,n){e.exports=n.p+"70fb3440936872624acbd614b3200320.png"},function(e,t,n){e.exports=n.p+"0a6d42c077a4095010e42669042105bf.png"},function(e,t,n){e.exports=n.p+"55a16b970f07d275d9a0913afc90903d.png"},function(e,t,n){e.exports=n.p+"4d77d69a58b511565028f7af92b029d2.png"},function(e,t,n){"use strict";n.r(t);var i=n(0),r=n(4),s=n(7);const o={title:"XPlorer!",resizable:!0,fileOpen:(e,t)=>{const n=Object(r.b)(e);if(null===n)new i.b("404","I think it's wrong path...",[["OK..?",i.e.Close]]);else{let e=i.f.Get().ActiveWindow;Object(s.default)(e,n.path,n.label)}}};t.default=o},function(e,t,n){var i={"./system/background/background.system.ts":21,"./system/explorer/explorer.system.ts":7,"./system/explorer/icon.system.ts":8};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=72},function(e,t){e.exports='    <div class="window">\r\n        <div class="window-title">\r\n            <span></span>\r\n            <div class="right">\r\n                <div class="button title-minimize"><span>&minus;</span></div>\r\n                <div class="button title-maximize"><span>&square;</span></div>\r\n                <div class="button title-close"><span>&times;</span></div>\r\n            </div>\r\n        </div>\r\n        <div class="window-menu">\r\n        </div>\r\n        <div class="window-content">\r\n        </div>\r\n    </div>'},function(e,t){e.exports='<div class="window">\r\n    <div class="window-title">\r\n        <span></span>\r\n        <div class="right">\r\n            <div class="button title-close"><span>&times;</span></div>\r\n        </div>\r\n    </div>\r\n    <div class="window-dialog-bg">\r\n        <p class="window-dialog-message"></p>\r\n        <div class="window-dialog-buttons"></div>\r\n    </div>\r\n</div>'},function(e,t){e.exports='<div class="window-resize window-resize-n"></div>\r\n<div class="window-resize window-resize-e"></div>\r\n<div class="window-resize window-resize-s"></div>\r\n<div class="window-resize window-resize-w"></div>\r\n<div class="window-resize window-resize-nw"></div>\r\n<div class="window-resize window-resize-ne"></div>\r\n<div class="window-resize window-resize-se"></div>\r\n<div class="window-resize window-resize-sw"></div>'},function(e,t,n){"use strict";n.r(t);var i=n(0),r=n(4);const s=[{name:"Programs",menu:Object(r.c)(Object(r.b)("C:\\Program Filez\\").path)},{name:"Logout",action:()=>new i.b("Error","You are not logged in",[["OK",()=>i.f.Get().ActiveWindow.Close()]],null)},{name:"Turn Off"}];t.default=s},function(e,t){e.exports='<div class="statusbar">\r\n    \x3c!--<div class="statusbar-startmenu"></div>--\x3e\r\n    <div class="statusbar-button statusbar-startbutton">Menu</div>\r\n    <div class="statusbar-window"></div>\r\n    <div class="statusbar-clock"></div>\r\n</div>'},function(e,t,n){var i=n(79);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(82)(i,r);i.locals&&(e.exports=i.locals)},function(e,t,n){t=e.exports=n(80)(!1);var i=n(81)(n(14));t.push([e.i,'.menu-selectable:hover, .menu-primary:hover {\n  background: #003099;\n  color: #fff; }\n\n.button, .menu-secondary, .window-menu {\n  background: #ccc;\n  color: #000; }\n\n.menu-secondary, .icon, .statusbar div, .window-title, .window-menu, .window-dialog {\n  cursor: default;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n/*always...*/\nhtml, body {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  overflow: hidden; }\n\nbody {\n  font-family: sans-serif;\n  background-color: #000; }\n\n.button {\n  border: 2px outset #ccc;\n  justify-content: center;\n  align-items: center; }\n  .button:active {\n    border: 2px inset #ccc; }\n\n.favicon {\n  width: 0.8em;\n  height: 0.8em;\n  margin-right: 0.18em; }\n\n.menu {\n  /* right-click menu */ }\n  .menu-secondary {\n    position: absolute;\n    left: 100%;\n    top: 0;\n    border: 2px outset #ccc;\n    z-index: 2;\n    min-width: 7.5em; }\n    .menu-secondary-vertical {\n      left: 0;\n      top: 100%; }\n  .menu-primary {\n    width: fit-content; }\n  .menu-disabled {\n    color: #666;\n    text-shadow: 1px 1px #eee; }\n  .menu-selectable, .menu-primary {\n    padding: .5em;\n    white-space: nowrap; }\n  .menu-disabled {\n    padding: .5em;\n    white-space: nowrap; }\n  .menu-wrapper {\n    position: relative; }\n    .menu-wrapper:hover > .menu-secondary {\n      display: block; }\n    .menu-wrapper-primary {\n      position: relative; }\n    .menu-wrapper > .menu-selectable::after {\n      content: "\\25ba";\n      font-size: 80%;\n      margin-left: 1.5em; }\n    .menu-wrapper .menu-secondary {\n      display: none; }\n  .menu-right {\n    display: block;\n    position: absolute;\n    z-index: 32765; }\n\n.modal {\n  position: absolute;\n  bottom: 0;\n  height: 100vh;\n  width: 100vw;\n  left: 0;\n  z-index: 32765; }\n  .modal-window {\n    width: calc(100% + 6px);\n    height: calc(100% + 6px);\n    left: -3px;\n    top: -3px; }\n\nbody {\n  background: #3e9e79 url('+i+');\n  background-size: 100vw 100vh; }\n\n.desktop {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 0; }\n\n.icon {\n  text-align: center;\n  position: absolute;\n  width: 64px;\n  height: calc( 64px + 1.55em); }\n  .icon-img {\n    width: 48px;\n    height: 48px;\n    -moz-user-drag: none;\n    -webkit-user-drag: none; }\n  .icon-label {\n    font-size: 90%;\n    color: #fff;\n    text-shadow: 1px 0 0 #000, -1px 0 0 #000, 0 1px #000, 0 -1px #000;\n    word-wrap: break-word;\n    overflow: hidden;\n    height: 2em;\n    line-height: 1em;\n    margin-top: 0.25em; }\n    .icon-label[contenteditable="true"] {\n      background-color: #fff !important;\n      text-shadow: none;\n      color: #000; }\n  .icon-selected .icon-img {\n    filter: sepia(80%) hue-rotate(180deg) brightness(0.6); }\n  .icon-selected .icon-label {\n    background-color: rgba(45, 45, 105, 0.5);\n    overflow: visible;\n    height: auto; }\n\n.statusbar {\n  background-color: #ccc;\n  position: fixed;\n  width: 100%;\n  bottom: 0;\n  border-top: 3px outset #ccc;\n  padding: 0.18em 0.5em 0.18em 0.65em;\n  box-sizing: border-box;\n  display: flex;\n  z-index: 32764;\n  height: 48px; }\n  .statusbar > div:not(.statusbar-startmenu) {\n    display: flex;\n    align-items: center; }\n  .statusbar-button {\n    border: 2px outset #ccc;\n    display: inline-block;\n    padding: 0.18rem 0.3rem; }\n    .statusbar-button:active {\n      border: 2px inset #ccc; }\n  .statusbar-startmenu {\n    position: absolute;\n    bottom: 2.1rem;\n    background: #ccc;\n    border: 2px outset #ccc; }\n  .statusbar-window {\n    height: 100%;\n    display: flex;\n    flex-grow: 1;\n    margin-left: 0.45rem; }\n    .statusbar-window div {\n      /* with title */\n      /*\r\n        max-width: 22.5em;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        */\n      /* without title */\n      border: 2px outset #ccc;\n      height: 100%;\n      padding: 0.18rem 0.3rem;\n      margin-right: 0.15rem; }\n      .statusbar-window div .favicon {\n        width: 2em;\n        height: 2em; }\n    .statusbar-window .selected {\n      border: 2px inset #ccc; }\n  .statusbar-clock {\n    display: flex;\n    align-items: center; }\n\n.window {\n  position: absolute;\n  width: 640px;\n  height: 480px;\n  min-width: 300px;\n  min-height: 300px;\n  border: 3px outset #ccc;\n  display: flex;\n  flex-direction: column; }\n  .window:focus {\n    outline: none; }\n  .window-title {\n    background: #7a7a7a linear-gradient(90deg, #6f6f6f, #919191);\n    height: auto;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.35em 0.4em 0.35em 0.8em; }\n    .window-title > span {\n      color: #fff; }\n    .window-title .right {\n      float: right; }\n      .window-title .right div {\n        display: inline-flex;\n        margin-left: 5px;\n        width: 1.2em;\n        line-height: 1em;\n        box-sizing: border-box; }\n  .window-active .window-title {\n    background: #003099 linear-gradient(90deg, #0f2e40, #4c8dde); }\n  .window-menu {\n    display: flex;\n    flex-direction: row; }\n  .window-submenu {\n    left: 0;\n    top: 100%;\n    float: left;\n    position: absolute;\n    top: 100%; }\n  .window-content {\n    /*placeholder*/\n    background-color: #fff;\n    color: #000;\n    /*placeholder ends*/\n    flex-grow: 1;\n    overflow: auto;\n    user-select: none; }\n  .window-resize {\n    position: absolute; }\n    .window-resize-n, .window-resize-s {\n      width: 100%;\n      height: 6px;\n      left: 0; }\n      .window-resize-n:hover, .window-resize-s:hover {\n        cursor: ns-resize; }\n    .window-resize-e, .window-resize-w {\n      width: 6px;\n      height: 100%;\n      top: 0; }\n      .window-resize-e:hover, .window-resize-w:hover {\n        cursor: ew-resize; }\n    .window-resize-ne, .window-resize-nw, .window-resize-se, .window-resize-sw {\n      width: 6px;\n      height: 6px; }\n    .window-resize-ne:hover, .window-resize-sw:hover {\n      cursor: nesw-resize; }\n    .window-resize-nw:hover, .window-resize-se:hover {\n      cursor: nwse-resize; }\n    .window-resize-n, .window-resize-ne, .window-resize-nw {\n      top: -3px; }\n    .window-resize-s, .window-resize-se, .window-resize-sw {\n      bottom: -3px; }\n    .window-resize-e, .window-resize-ne, .window-resize-se {\n      right: -3px; }\n    .window-resize-w, .window-resize-nw, .window-resize-sw {\n      left: -3px; }\n  .window-dialog {\n    text-align: center;\n    cursor: default;\n    width: 350px;\n    /*min-width:250px;*/\n    min-height: 100px;\n    height: auto; }\n    .window-dialog-buttons {\n      display: flex;\n      justify-content: center; }\n      .window-dialog-buttons .button {\n        padding: 0.25rem 0.4rem;\n        margin: 0 0.45rem;\n        min-width: 4.5rem; }\n    .window-dialog-bg {\n      background-color: #ccc;\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      justify-content: center;\n      padding: 1em 1.5em; }\n    .window-dialog-message {\n      margin-top: 0; }\n',""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(o=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),s=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(s).concat([r]).join("\n")}var o;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var s=this[r][0];null!=s&&(i[s]=!0)}for(r=0;r<e.length;r++){var o=e[r];null!=o[0]&&i[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},function(e,t,n){"use strict";e.exports=function(e,t){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)||t?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},function(e,t,n){var i,r,s={},o=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=i.apply(this,arguments)),r}),a=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var i=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}}(),l=null,c=0,d=[],u=n(83);function h(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=s[i.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](i.parts[o]);for(;o<i.parts.length;o++)r.parts.push(v(i.parts[o],t))}else{var a=[];for(o=0;o<i.parts.length;o++)a.push(v(i.parts[o],t));s[i.id]={id:i.id,refs:1,parts:a}}}}function p(e,t){for(var n=[],i={},r=0;r<e.length;r++){var s=e[r],o=t.base?s[0]+t.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};i[o]?i[o].parts.push(a):n.push(i[o]={id:o,parts:[a]})}return n}function m(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=d[d.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=a(e.insertAt.before,n);n.insertBefore(t,r)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=function(){0;return n.nc}();i&&(e.attrs.nonce=i)}return w(t,e.attrs),m(e,t),t}function w(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,i,r,s;if(t.transform&&e.css){if(!(s="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=s}if(t.singleton){var o=c++;n=l||(l=g(t)),i=x.bind(null,n,o,!1),r=x.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",w(t,e.attrs),m(e,t),t}(t),i=function(e,t,n){var i=n.css,r=n.sourceMap,s=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||s)&&(i=u(i));r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([i],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,n,t),r=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),i=function(e,t){var n=t.css,i=t.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){f(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return h(n,t),function(e){for(var i=[],r=0;r<n.length;r++){var o=n[r];(a=s[o.id]).refs--,i.push(a)}e&&h(p(e,t),t);for(r=0;r<i.length;r++){var a;if(0===(a=i[r]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete s[a.id]}}}};var b,y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function x(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=y(t,r);else{var s=document.createTextNode(r),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(s,o[t]):e.appendChild(s)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,s=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(r=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:i+s.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,